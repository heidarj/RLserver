@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model RLserver.Models.Tournament

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Tournament</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        
        <div class="form-group">
            @Html.LabelFor(model => model.Name)
            <div>
                @Html.TextBoxFor(model => model.Name, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TournamentType)
            <div>
                @Html.EnumDropDownListFor(model => model.TournamentType, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TournamentType, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            <table id="matchListTable" class="table">
                <thead>
                <tr>
                    <th>Id</th>
                    <th>Matches</th>
                </tr>
                </thead>
            </table>
        </div>

        <div class="form-group">
            <input type="submit" value="Save" class="btn btn-primary"/>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    <script>
        var matchListTableData = @Html.Raw(JsonConvert.SerializeObject(Model.Matches, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }));

        var matchListTable = $("#matchListTable").DataTable({
            dom: "tr",
            autoWidth: false,
            ordering: false,
            info: false,
            data: matchListTableData,
            language: {
                emptyTable: "No matches have been planned for this tournament"
            },
            columns: [
                {
                    data: "id" 
                },
                {
                    data: "",
                    render: function(data, type, tournament) {
                        return tournament.matches.toString();
                    }
                },
                {
                    data: "",
                    render: function(data, type, tournament) {
                        return tournament.currentRound;
                    }
                }
            ]
        });
    </script>  
}
